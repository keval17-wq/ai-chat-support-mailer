/**
 * DISCLAIMER: This SDK is for demonstration and local development purposes.
 * For production, always use the secure method with environment variables.
 * DO NOT hard-code your API keys in any public-facing code.
 */

// ====================================================================================
// SECURE VERSION: Recommended for all use, including local testing.
// Requires API keys to be set as environment variables (e.g., in a .env file).
// ====================================================================================

import { OpenAI } from 'openai';
import { Resend } from 'resend';

// const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
// const resend = new Resend(process.env.RESEND_API_KEY);

// ====================================================================================
// OPEN VIEW VERSION: For quick local testing ONLY. DO NOT USE IN PRODUCTION.
// You can enter your keys directly here for immediate testing.
// ====================================================================================

const OPENAI_API_KEY_LOCAL = 'YOUR_OPENAI_API_KEY_HERE';
const RESEND_API_KEY_LOCAL = 'YOUR_RESEND_API_KEY_HERE';

const openai = new OpenAI({ apiKey: OPENAI_API_KEY_LOCAL });
const resend = new Resend(RESEND_API_KEY_LOCAL);

// ====================================================================================
// CORE FUNCTIONS
// ====================================================================================

/**
 * Generates an email draft for a support request using the OpenAI API.
 * @param {object} params - The parameters for email generation.
 * @param {string} params.userMessage - The user's support message.
 * @param {string} params.userEmail - The user's email address.
 * @returns {Promise<string>} A promise that resolves to the generated HTML email body.
 */
async function generateSupportEmail({ userMessage, userEmail }) {
    const prompt = `
        You are an AI support agent. Your purpose is to summarize a user's request and notify a support team.
        Draft a polite and professional email for an internal support team. Do not include a subject line.
        
        The email should include:
        - The user's email address: ${userEmail}
        - A brief summary of their request.
        - The full user message below the summary.
        
        User's Message:
        ---
        ${userMessage}
        ---
        
        The response should be in HTML format with proper paragraph tags (<p>).
    `;

    try {
        const completion = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: prompt }],
            temperature: 0.7,
            max_tokens: 400,
        });

        if (completion.choices && completion.choices.length > 0) {
            return completion.choices[0].message.content.trim();
        } else {
            throw new Error('No email draft was generated by the AI.');
        }
    } catch (error) {
        console.error('Error with AI email generation:', error);
        throw error;
    }
}

/**
 * Sends an email using the Resend API.
 * @param {object} params - The parameters for sending the email.
 * @param {string} params.from - The sender's email address.
 * @param {string} params.to - The recipient's email address.
 * @param {string} params.subject - The subject of the email.
 * @param {string} params.html - The HTML content of the email.
 * @returns {Promise<object>} A promise that resolves to the response from the Resend API.
 */
async function sendEmail({ from, to, subject, html }) {
    try {
        const data = await resend.emails.send({
            from,
            to,
            subject,
            html,
        });
        return data;
    } catch (error) {
        console.error('Error with Resend email sending:', error);
        throw error;
    }
}

// ====================================================================================
// EXAMPLE USAGE
// ====================================================================================

(async () => {
    // Example call using the core functions
    const userMessage = "My account is locked and I can't reset my password. Please help!";
    const userEmail = "customer@example.com";
    
    try {
        const emailBody = await generateSupportEmail({ userMessage, userEmail });
        
        const emailResponse = await sendEmail({
            from: 'Your AI Support <support@yourcompany.com>',
            to: 'inbox@yourcompany.com', // Replace with your support inbox
            subject: 'New Support Request',
            html: emailBody
        });

        console.log('Email sent successfully:', emailResponse);
    } catch (error) {
        console.error('Failed to run example:', error);
    }
})();

